<?xml version="1.0" encoding="UTF-8"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.07" IsLegacyIdCompatible="false" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="" keyVect="dYWPgBBtQAK//39DkVZKjw==" exportKeySalt="469eebda-6629-459c-bcf3-f0239b8416ac" containsCipherText="false"/>
<Object class="com.sunopsis.dwg.dbobj.SnpTrt">
		<Field name="CleanupOnError" type="java.lang.String">null</Field>
	<Field name="CompType" type="java.lang.String">null</Field>
	<Field name="DelegateClass" type="java.lang.String">null</Field>
	<Field name="DelegateScript" type="java.lang.String">null</Field>
	<Field name="ExpectedAstClass" type="java.lang.String">null</Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.263]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[53fc0da9-9e7d-457b-9d09-e24bf62a1330]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[U]]></Field>
	<Field name="IndExcludeExUnitBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitEnd" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitMain" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapCleanup" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapEnd" type="java.lang.String">null</Field>
	<Field name="IndGenerateLoad" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndIsHidden" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndJrnMethod" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="IndSuppSetBased" type="java.lang.String">null</Field>
	<Field name="IntgType" type="java.lang.String">null</Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="IsConcurrent" type="java.lang.String">null</Field>
	<Field name="IsSeeded" type="java.lang.String">null</Field>
	<Field name="IBaseCompKm" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IProject" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScBaseTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScOrigTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtDelTxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITxtTrtTxt" type="com.sunopsis.sql.DbInt"><![CDATA[845]]></Field>
	<Field name="KimMultiDserver" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmDefault" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmLang" type="java.lang.String">null</Field>
	<Field name="KmSrcLang" type="java.lang.String">null</Field>
	<Field name="KmSrcTechno" type="java.lang.String">null</Field>
	<Field name="KmTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="KmVersion" type="java.lang.String"><![CDATA[28]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:52.117]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LkmType" type="java.lang.String">null</Field>
	<Field name="LChecksum" type="com.sunopsis.sql.DbInt"><![CDATA[525273702]]></Field>
	<Field name="LCode" type="java.lang.String">null</Field>
	<Field name="OggJkm" type="java.lang.String">null</Field>
	<Field name="OrdFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ProcType" type="java.lang.String">null</Field>
	<Field name="ProdAstType" type="java.lang.String">null</Field>
	<Field name="RepGuid" type="java.lang.String">null</Field>
	<Field name="RepVersion" type="java.lang.String">null</Field>
	<Field name="ScriptPath" type="java.lang.String">null</Field>
	<Field name="ScOrigTrtTag" type="java.lang.String">null</Field>
	<Field name="Subtype" type="java.lang.String">null</Field>
	<Field name="TrtName" type="java.lang.String"><![CDATA[IKM File to File (Java)]]></Field>
	<Field name="TrtType" type="java.lang.String"><![CDATA[KI]]></Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
	<Field name="VLastDate" type="java.sql.Timestamp">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[16c6ad62-063c-4dcc-870a-fa50d1129c4b]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[845]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[COMPONENT NAME: IKM File to File (Java)

AUTHOR: Oracle


DESCRIPTION:
This KM is used to transform Files as a source and output the data into a target File.

The supported datatypes that are natively converted are String (as a java.lang.String), Number (as java.math.BigDecimal) and Date (as java.lang.Date). Any other datatype will be manipulated as a String.
If a Date does not match the specified format when reading, a null value will be returned. The default Date format is "dd/MM/yyyy".
If a Numeric does not match the specified format when reading, a null value will be returned.

The mappings are to be written taking into account the required datatypes.
For instance, if the source column is declared as a Date, it is valid to write a mapping such as: FIL.C1.getTime() which will call the getTime() method of the Date Java class, but the target column is expected to be a number.
Example of mappings:
FIL.C5 + '|' + FIL.C5
FIL.C5.toLowerCase()
Long.parseLong(FIL.C5.substring(1))+10
FIL.C4.doubleValue()*2


Caution: avoid declaring a datatype as a Number or a Date if you don't need  transformations on it because it takes additionnal time to have the data converted into the native datatype.

The name of the input file can contain the wildcard characters * and ?.
* will match zero or more character
? will match exactly one character
Example: File*.txt will match File1.txt, File2.txt, File3.txt, etc.

When defining Directory under Physical Schema, use '/' (forward slash) to specify directory path on Windows. For example, "C:/Files".


---------------------------------------------------------------------------------------------------------------------------------------------------

A special function called smartSequence(pObject, pValue, pInitial Value) can be used in order to generate a number.
The number is incremented each time pObject equals pValue.
smartSequence(pObject, pValue) is equivalent to smartSequence(pObject, pValue, 0)
For instance:
smartSequence( FIL.C9, "CLI", 0)
will create a number starting from 0 and that will be incremented each time the column C9 is equal to "CLI".

CAUTION: never use this function with a number of threads different from 1, otherwise you will get unexpected results.

This function can be used in order to manage files such as:
CLI;Name1;FirstName1
ORDER;Date11
ORDER LINE;Item111;Amount111;Price111
ORDER LINE;Item112;Amount112;Price112
ORDER;Date12
ORDER LINE;Item121;Amount111;Price121
CLI;Name2;FirstName2
ORDER;Date21
ORDER LINE;Item211;Amount211;Price211
ORDER LINE;Item212;Amount212;Price212


Such a file can be processed as a single column file of type String and apply the following mapping:
smartSequence( FIL.C1.split(";")[0], "CLI", 0)
smartSequence( FIL.C1.split(";")[0], "ORDER", 0)
smartSequence( FIL.C1.split(";")[0], "ORDER LINE", 0)
FIL.C1

The result will be:
0;0;0;CLI;Name1;FirstName1
0;1;0;ORDER;Date11
0;1;1;ORDER LINE;Item111;Amount111;Price111
0;1;2;ORDER LINE;Item112;Amount112;Price112
0;2;2;ORDER;Date12
0;2;3;ORDER LINE;Item121;Amount111;Price121
1;2;3;CLI;Name2;FirstName2
1;3;3;ORDER;Date21
1;3;4;ORDER LINE;Item211;Amount211;Price211
1;3;5;ORDER LINE;Item212;Amount212;Price212


This file can then be easily loaded into different tables in order to be further processed using some joins on the generated numbers.


---------------------------------------------------------------------------------------------------------------------------------------------------

A special function called normalSequence(pObject, pInitial Value) can be used in order to generate a unique number.
The number is incremented each time the function is invoked. pObject is used to identify each sequence.
normalSequence(pObject) is equivalent to normalSequence(pObject, 0)
For instance:
normalSequence( "CLI", 0)
will create a number starting from 0 and that will be incremented each time the expression normalSequence( "CLI", 0) is encountered.


The normalSequence function can be used with multiple threads.

Furthermore, as normalSequence can be used with any Object to identify the sequence numbers, it is valid to write a mapping such as
normalSequence(FIL.C1). In this case, an input file as follows
A;1
A;2
A;3
B;4
B;5
C;6
C;7
C;8

will produce (if the above mapping is provided as a 3rd target column):
A;1;0
A;2;1
A;3;2
B;4;0
B;5;1
C;6;0
C;7;1
C;8;2

--------------------------------------------------------------------------------------------------------------------------
RESTRICTIONS:
	- Record codes defined on the columns are not taken into account. They need to be implemented as Filters in the Mapping.
	- Only Numeric, Date and String datatypes are supported.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Edit Command]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_TRT_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[8145dd3f-6c15-4d34-8249-ac298e659d1a]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[846]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[308]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[10]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[JAVA_HOME]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Location of the JDK. Default to java.lang.System.getProperty("java.home").]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[bee80584-0145-4375-b375-4eb796db2b21]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[846]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Enter a valid location for a Java installtion directory. 
Examples:
	$ODI_JAVA_HOME on Unix 
	%ODI_JAVA_HOME% on Windows
	/usr/local/bin/jdk1.6]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[User Exit help]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_UE_HELP]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_USER_EXIT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[a88616c8-77f8-4d14-99f7-3408e3ca68f5]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[847]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[309]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[20]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[APPEND]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Append data to the target]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[f197d177-51a2-43d7-b109-471264992184]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[847]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Set this option to true if you want the result to be appended to the target file.
If set to no, the content will be overwritten.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[2c46e3aa-5c29-4ab5-b0ea-afdb93b377c2]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[848]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[310]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[30]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[DISCARDMAX]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Maximun number of records to discard]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[53dc22a0-5303-4c0d-afb1-bed7ce9a1230]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[848]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Maximun number of record to discard. When 0 then unlimited]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[04c50d14-8376-4b5c-83af-17a91787dde3]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[849]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[311]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[40]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[NB_THREADS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Number of threads]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[6e34eabe-11c0-4c8b-acdd-37a7090d5063]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[849]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Number of Threads that are to be used when loading the File.
The number of threads can be specified to a higher value than the number of CPUs, particularly in the case where the target database is accessible with a low latency network.

Caution: each thread will open a connection to the target database. Please make sure that the database is configured to support the required number of connections]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[562663ca-32ce-4de1-8261-429b3bbcf1a9]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[850]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[312]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[50]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[LOG_FILE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Log file name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[64c53118-7d43-44f7-91af-c8a2e143e945]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[850]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[LOG_FILE specifies the log file which ODI will create to store logging information about the loading process. If a filename is not specified, the name of the target file is used by default with the default extension (LOG).]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[6e6e9154-87d1-41d3-ba58-d6de48d1d1e9]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[851]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[313]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[60]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[BAD_FILE]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[bad file name]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[b255ce5a-8e25-44d9-acef-0a5968a9c421]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[851]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[BAD_FILE specifies the name of the bad file created by ODI to store records that cause errors during insert. If a filename is not specified, the name of the target file is used by default with the .BAD extension. This file has the same format as the input datafile.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[7a79fd0d-7f36-41a3-a5c9-0edcd65516aa]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[852]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[314]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[70]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[SOURCE_ENCODING]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Encoding of the Source file]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[a30ef615-6cec-4d2a-8ad9-1a168c1e5b79]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[852]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Optionnaly specify an encoding for the Source file.
Leave blank to use the machine's default encoding.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[55865e7c-5287-4914-93df-1d0afd6637ff]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[853]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[315]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[80]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[TARGET_ENCODING]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Encoding of the Target file]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[19b47abd-9a79-44dc-948e-032d9fa59990]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[853]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Optionnaly specify an encoding for the Target file.
Leave blank to use the machine's default encoding.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[6442cb67-e066-48b2-b81a-80dcd7ec0355]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[854]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
	<Field name="ShortValue" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[REMOVE_TEMPORARY_OBJECTS]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Remove temporary objects]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[C]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[2e96ac6a-0f59-48a0-8373-eda71cfb41bb]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[854]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[If set, log files and bad files will be removed.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[8cae13ef-7301-4d07-a243-d43a76f81e9c]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[855]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[317]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[100]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[PROCESSED_FILE_PREFIX]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Prefix the file name after process]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[3e315364-75a5-4917-91a1-8616de0bc5ca]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[855]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Prefix to be added to the input file name when it has been processed.

For example, if the source file is File*.txt and that this filter takes into account the following files:
File1.txt
File2.txt
File3.txt


you can specify the prefix to "done" for instance so that the processed files are renamed to:
doneFile1.txt
doneFile2.txt
doneFile3.txt

The next run will then ignore those files as they don't match the pattern File*.txt]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpUserExit">
		<Field name="ExprITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[2fbe3e2f-a46a-4517-9f5e-a168dbdfb840]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="ITxtUeHelp" type="com.sunopsis.sql.DbInt"><![CDATA[856]]></Field>
	<Field name="ITxtValue" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[318]]></Field>
	<Field name="IUserExitGroup" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="Position" type="com.sunopsis.sql.DbInt"><![CDATA[110]]></Field>
	<Field name="ShortValue" type="java.lang.String">null</Field>
	<Field name="Subtypes" type="java.lang.String">null</Field>
	<Field name="UeName" type="java.lang.String"><![CDATA[PROCESSED_FILE_SUFFIX]]></Field>
	<Field name="UeSdesc" type="java.lang.String"><![CDATA[Suffix the file name after process]]></Field>
	<Field name="UeType" type="java.lang.String"><![CDATA[V]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[d390cd5b-78e7-461f-9dcf-2920700ecfba]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[856]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[111]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[Suffix to be added to the input file name when it has been processed.

For example, if the source file is File*.txt and that this filter takes into account the following files:
File1.txt
File2.txt
File3.txt


you can specify the suffix to ".done" for instance so that the processed files are renamed to:
File1.txt.done
File2.txt.done
File3.txt.done

The next run will then ignore those files as they don't match the pattern File*.txt]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String">null</Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[857]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[BEANSHELL]]></Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.283]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[2daca3e8-70ba-4447-97fb-4635f51eed47]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogFinalCmd" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[253]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimDrvdSel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.283]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[10]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Initialize replacement method]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[ace63dd0-3e26-4314-ab0c-f68163cf584f]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[857]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[1]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[<?
/* This function is used to replace at code generation time the column names in the mappings and filters by the accurate Java variables.
These Java variables are generated when parsing the file */
java.lang.String replaceMappings(java.lang.String pMapping) {	

	com.sunopsis.tools.core.SnpsSortedVector translationItems = new com.sunopsis.tools.core.SnpsSortedVector(new com.sunopsis.tools.core.SnpsStringPairComparator());

	<%= odiRef.getSrcColList("","","translationItems.addElement(new com.sunopsis.tools.core.SnpsStringPair(" + '"' + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + ".[COL_NAME]" + '"' + ", " + '"' + "srcCols" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + "_[COL_NAME]" + '"' + "));","\n\t","") %>
	pMapping = com.sunopsis.tools.core.SnpsStringTools.replace(translationItems, pMapping);
	return pMapping;
}

java.lang.String replaceMappings(java.lang.String pMapping, java.lang.String pColumn) {	
  
	return replaceMappings(pMapping) + targetSeparators(pColumn);
}



/* This String is used in code generation in order to help the double quote management between the % and ? phases */
String safeSeparator = "$ODI Separator for Double Quote Generation. This String is long on purpose in order to ensure the uniqueness within the entire mapping generated.!$"; 

/* This function is used to generate the required code to declare the formatters that will be used on each input field.
The choice of the formatter is based on the datatype of the source column */
import java.util.LinkedList;
import java.util.Collections;
import java.util.HashMap;
import java.lang.Integer;

LinkedList alreadyWrittenInputFormaters = new LinkedList();

void createInputFormaters(String pExpression) {

 	LinkedList colList = new LinkedList();
	<%= odiRef.getSrcColList("", "","colList.add(\u0022" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + ".[COL_NAME]\u0022);",  "\n\t", "") %>
	Collections.sort(colList);
	Collections.reverse(colList);
	com.sunopsis.tools.core.SnpsSortedVector translationItems = new com.sunopsis.tools.core.SnpsSortedVector(new com.sunopsis.tools.core.SnpsStringPairComparator());
	String tmpExpression="";

	HashMap outputList2 = new HashMap();
	String doubleQuote = "" + '"';

	<% if ("D".equals(odiRef.getSrcTablesList("", "[FILE_FORMAT]", "", ""))) {%>
	/* We take care of missing columns by returning an empty String if the split() function does not return enough elements */
	<%=odiRef.getSrcColList("","", "outputList2.put(\u0022" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + ".[COL_NAME]\u0022, \u0022srcCols" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + "_[COL_NAME] = in[COL_NAME]Formatter.parse(([POS]<=srcCols.length)?(srcCols£[POS]-1§):(\u0022 + doubleQuote+ doubleQuote + \u0022),Odiwarn);\u0022);",  "\n", "").replaceAll("£", "[").replaceAll("§", "]") %>
	<% } else { %>
	<%=odiRef.getSrcColList("", "", "outputList2.put(\u0022" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + ".[COL_NAME]\u0022, \u0022srcCols" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + "_[COL_NAME] = in[COL_NAME]Formatter.parse(tmpString.substring([FILE_POS]-1, [FILE_END_POS]),Odiwarn);\u0022);",  "\n", "") %>
	<% } %>

	for (int i=0;i<colList.size();i++){
		translationItems.addElement(new com.sunopsis.tools.core.SnpsStringPair(colList.get(i), ""));
		tmpExpression = com.sunopsis.tools.core.SnpsStringTools.replace(translationItems, pExpression);
		if (pExpression.length() > tmpExpression.length()) {
			pExpression = tmpExpression;
			if (!alreadyWrittenInputFormaters.contains(colList.get(i))) {
				alreadyWrittenInputFormaters.add(colList.get(i));
				out.println("\u0009\u0009" + outputList2.get(colList.get(i)));
			}
		} 
	}
}

void createInputFormaters() {
  out.println("//Input Formatters");
	String doubleQuote = "" + '"';
		<%= odiRef.getSrcColList("", "","if (\u0022DATE\u0022.equals(\u0022[SOURCE_DT]\u0022)) { out.println(\u0022\u0009\u0009OdiDateFormatIN in[COL_NAME]Formatter = new OdiDateFormatIN(\u0022 + doubleQuote + \u0022[COL_FORMAT]\u0022 + doubleQuote + \u0022, myStringUtils,\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022 , \u0022 + doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022 , \u0022 + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022);\u0022); } else if (\u0022NUMERIC\u0022.equals(\u0022[SOURCE_DT]\u0022)) { out.println(\u0022\u0009\u0009OdiNumberFormatIN in[COL_NAME]Formatter = new OdiNumberFormatIN(\u0022 + doubleQuote + \u0022[COL_DEC_SEP]\u0022 + doubleQuote + \u0022, myStringUtils,\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022 , \u0022+ doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022 , \u0022  + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022);\u0022);} else { out.println(\u0022\u0009\u0009OdiStringFormatIN in[COL_NAME]Formatter = new OdiStringFormatIN(myStringUtils,\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022 , \u0022+ doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022 , \u0022  + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022);\u0022);}",  "\n\t", "") %>
}

/* This function is used to generate the required code to declare the formatters that will be used on each output field.
The choice of the formatter is based on the datatype of the target column */
void createOutputFormaters() {
  out.println("\u0009\u0009//Output Formatters");

	String doubleQuote = "" + '"';
  <% out.print( odiRef.getColList("if (\u0022DATE\u0022.equals(\u0022[DEST_DT]\u0022)){ out.println(\u0022\u0009\u0009OdiDateFormatOUT out[COL_NAME]Formatter = new OdiDateFormatOUT(\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_FORMAT]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_DEC_SEP]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022,myStringUtils);\u0022);} else if (\u0022NUMERIC\u0022.equals(\u0022[SOURCE_DT]\u0022)) { out.println(\u0022\u0009\u0009OdiNumberFormatOUT out[COL_NAME]Formatter = new OdiNumberFormatOUT(\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[SCALE]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_FORMAT]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_DEC_SEP]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022,[BYTES],myStringUtils);\u0022);} else { out.println(\u0022\u0009\u0009OdiStringFormatOUT out[COL_NAME]Formatter = new OdiStringFormatOUT(\u0022 + doubleQuote + \u0022[COL_NAME]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_MANDATORY]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_FORMAT]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_DEC_SEP]\u0022 + doubleQuote + \u0022,\u0022 + doubleQuote + \u0022[COL_NULL_IF_ERR]\u0022 + doubleQuote + \u0022,[BYTES],myStringUtils);\u0022);}", "\n\t") );    
  %>
}

String getOdiClassName() {
	String rawName = "<%= odiRef.getTargetTable("TABLE_NAME") %>";
	rawName = "IKMFileToFile" + rawName.replaceAll("\.", "_").replaceAll("/", "_").replaceAll("" + '\'+ '\', "_"); 
	return rawName;
}


LinkedList targetColumnList = new LinkedList();
LinkedList sourceColumnList = new LinkedList();
LinkedList actualMappingList = new LinkedList();
LinkedList expressionList = new LinkedList();

HashMap codes= new HashMap(); 
HashMap lengths = new HashMap(); 
HashMap prefix = new HashMap(); 
HashMap postfix = new HashMap(); 
HashMap starts = new HashMap(); 
HashMap ends = new HashMap(); 
HashMap mappingExpressions = new HashMap();

String doubleQuote = "" + '"';
int expressionIndex = 0;
  
	public String prefix(String pColumn) {
		String separators = "";
		Iterator r = targetColumnList.descendingIterator();
		boolean startCounting = false; 
		while (r.hasNext()) {
			String col = (String)r.next(); 
			if (!startCounting) {
					startCounting = col.equals(pColumn);
			} else if (actualMappingList.indexOf(col)<0) {
				if ("D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"))   
					separators += "<%= odiRef.getTargetTable("FILE_SEP_FIELD") %>";
				else if (lengths.get(col)!=null) {
					for (int i=0;i<Integer.parseInt((String)lengths.get(col));i++) {
						separators+=" ";
					}
				}
			} else
				break;        
		}
     
		return separators;  
	}
  
  	public String postfix(String pColumn) {
		String separators = "";
		if (targetColumnList.indexOf(pColumn)!=targetColumnList.size()-1) {
			if (actualMappingList.indexOf(pColumn)==actualMappingList.size()-1) {
				Iterator r = targetColumnList.descendingIterator();
				boolean startCounting = false; 
				while (r.hasNext()) {
					String col = (String)r.next(); 
					if (actualMappingList.indexOf(col)<0) { 
						if ("D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"))   
							separators += "<%= odiRef.getTargetTable("SFILE_SEP_FIELD") %>";
						else if (lengths.get(col)!=null) {
							for (int i=0;i<Integer.parseInt((String)lengths.get(col));i++) {
								separators+=" ";
							}
						}
					} else
						break;        
				}
			} else {
				if ("D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"))   
					separators = "<%=odiRef.getTargetTable("FILE_SEP_FIELD") %>";					 
			} 
		} 
		return separators;  
	}
  

void init() {

  out.println("//Record Codes for Multi-Record Processing");

  if (!("D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"))) {

    <%=odiRef.getTargetColList("\n\t\t", "lengths.put(\u0022[COL_NAME]\u0022, \u0022[LONGC]\u0022);", "\n\t\t", "", "")%>

    for (String key : lengths.keySet()) {
      out.println("\u0009\u0009//Source: lengths.put(" + doubleQuote + key + doubleQuote + ", " + doubleQuote + (String)lengths.get(key) + doubleQuote + ");");
    }  

    <%=odiRef.getSrcColList("", "starts.put(\u0022[COL_NAME]\u0022, \u0022[FILE_POS]\u0022);", "starts.put(\u0022[COL_NAME]\u0022, \u0022[FILE_POS]\u0022);", "\n\t\t", "")%>
    
    <%=odiRef.getSrcColList("", "ends.put(\u0022[COL_NAME]\u0022, \u0022[FILE_END_POS]\u0022);", "ends.put(\u0022[COL_NAME]\u0022, \u0022[FILE_END_POS]\u0022);", "\n\t\t", "")%>
    for (String key : starts.keySet()) {
      out.println("\u0009\u0009//Source: Column = " + key + ", starts at= " + (String)starts.get(key));
      out.println("\u0009\u0009//Source: Column = " + key + ", ends at= " + (String)ends.get(key));
    }
    
  } 


  <%=odiRef.getSrcColList("", "codes.put(\u0022[COL_NAME]\u0022, \u0022[REC_CODE_LIST]\u0022);", "codes.put(\u0022[COL_NAME]\u0022, \u0022[REC_CODE_LIST]\u0022);", "\n\t\t", "")%>
  for (String key : codes.keySet()) {
    out.println("\u0009\u0009codes.put(" + doubleQuote + key + doubleQuote + ", " + doubleQuote + (String)codes.get(key) + doubleQuote + ");");
  }

  <%=odiRef.getSrcColList("", "sourceColumnList.add(\u0022[COL_NAME]\u0022);", "sourceColumnList.add(\u0022[COL_NAME]\u0022);", "\n\t\t", "")%>
  Iterator r = sourceColumnList.descendingIterator();
  while (r.hasNext()) {
    out.println("\u0009\u0009//Source: column=" + (String)r.next());
  }   

  <%=odiRef.getTargetColList("\n\t\t", "targetColumnList.add(\u0022[COL_NAME]\u0022);", "\n\t\t", "", "")%>
   r = targetColumnList.descendingIterator();
  while (r.hasNext()) {
    out.println("\u0009\u0009//Target: column=" + (String)r.next());
  }   
  
  <%
    out.println("\u0009\u0009String[] expressions = \u0022" + odiRef.getColList("", "[EXPRESSION]" + "===:::===" , "", "", "").replaceAll("\u0022", "DoubleQuote") + "\u0022.split(\u0022===:::===\u0022);");     
  %>   
  for (String  expr: expressions) {
    expressionList.add(expr);
  }  
  
  r = expressionList.descendingIterator();
  while (r.hasNext()) {
    out.println("\u0009\u0009//Expression=" + (String)r.next());
  }   

 <%
    out.println("\u0009\u0009//" + odiRef.getColList("", "[EXPRESSION]" + "~~~~~===~~~~" , "", "", "").replaceAll("\u0022", "DoubleQuote")   );     
  %>
    
  <%=odiRef.getColList("\n\t\t", "actualMappingList.add(\u0022[COL_NAME]\u0022);", "\n\t\t", "", "")%>
  r = actualMappingList.iterator();
  expressionIndex = 0;
  while (r.hasNext()) {
    String attribute =  (String)r.next(); 
    mappingExpressions.put(attribute, (String)expressionList.get(expressionIndex));  
    out.println("\u0009\u0009//Target: attribute=" + attribute);
    out.println("\u0009\u0009//Target: mapping  =" + (String)expressionList.get(expressionIndex));
    expressionIndex++;    
  }   
    		

 
  <% 
    out.println(odiRef.getTargetColList("\n\t\t", "prefix.put(\u0022[COL_NAME]\u0022, prefix(\u0022[COL_NAME]\u0022));", "\n\t\t", "", ""));      
    out.println(odiRef.getTargetColList("\n\t\t", "postfix.put(\u0022[COL_NAME]\u0022, postfix(\u0022[COL_NAME]\u0022));", "\n\t\t", "", ""));      
  %>
      
    for (String key : prefix.keySet()) {
      out.println("\u0009\u0009//prefix.put(" + doubleQuote + key + doubleQuote + ", " + doubleQuote + (String)prefix.get(key) + doubleQuote + ");");
    }

    for (String key : postfix.keySet()) {
      out.println("\u0009\u0009//postfix.put(" + doubleQuote + key + doubleQuote + ", " + doubleQuote + (String)postfix.get(key) + doubleQuote + ");");
    }



}

void recordCodeFilter() {
  out.println("");
  for (String key : codes.keySet()) {
    if (key!= null && ((String)codes.get(key)).length()>0) 
        if ("D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"))
            out.println("\u0009\u0009\u0009\u0009if (skipRecordCode(" + doubleQuote + key + doubleQuote + ", srcCols[" + sourceColumnList.indexOf(key) + "])) continue;" );
        else {
            out.println("\u0009\u0009\u0009\u0009if (skipRecordCode(" + doubleQuote + key + doubleQuote + ", tmpString.substring(" + (String)starts.get(key) + "-1, Math.min(" + (String)ends.get(key) + "," + ((String)codes.get(key)).length() + ")) )) continue;" );
        }
  }

}

java.lang.String wrapColumn (String column) {
  return wrapColumn(column, mappingExpressions.get(column)).replaceAll("DoubleQuote", "\\u0022");
}

java.lang.String wrapColumn (String column, String value) {
  String wrapped = "out" + column + "Formatter.format(" + replaceMappings(value) +",myStringBuilder,Odiwarn);";
  String prefix = prefix.get(column);
  if (prefix!=null && prefix.length()>0)
    wrapped = "myStringBuilder.append(" + doubleQuote + prefix + doubleQuote + ");" + wrapped;
    
  String postfix = postfix.get(column);
  if (postfix!=null && postfix.length()>0)
    wrapped = wrapped + "myStringBuilder.append(" + doubleQuote + postfix + doubleQuote + ");";

  return wrapped;
}

void inputs () {
  out.println("//Input sources" );
	<%= odiRef.getColList("", "out.println(\u0022\u0009\u0009\u0009\u0009\u0022 + createInputFormaters(mappingExpressions.get(\u0022[COL_NAME]\u0022))); ", "\n\t\t\t\t", "", "") %>
}

void outputs () {
  out.println("//Output mappings" );
  <%=odiRef.getColList("", "out.println(\u0022\u0009\u0009\u0009\u0009\u0022 + wrapColumn(\u0022[COL_NAME]\u0022)); ", "\n\t\t\t\t", "", "")%> 
}

void writeHeaderLine() {    

  String headerLineCount = "<%=odiRef.getTargetTable("FILE_FIRST_ROW") %>";  
  String trgRecordSeparator = "<%=odiRef.getTargetTable("SFILE_SEP_FIELD") %>";
  String trgLineSeparator = "<%=odiRef.getTargetTable("SFILE_SEP_ROW") %>";
  String headerLine = "";
  boolean isDelimited = "D".equals("<%=odiRef.getTargetTable("FILE_FORMAT") %>"); 
                        
  if (headerLineCount!=null && !headerLineCount.equals("0")) { 
      
    Iterator r = targetColumnList.descendingIterator();
		boolean startCounting = false; 
		while (r.hasNext()) {
			String col = (String)r.next(); 

      if (!isDelimited) {   
				if (lengths.get(col)!=null) {
          Integer paddingLength = Integer.parseInt((String)lengths.get(col)) - col.length(); 
					for (int i=0;i<paddingLength;i++) {
						col+=" ";
					}
				}
      } else if (startCounting)   
					headerLine = trgRecordSeparator + headerLine;

			headerLine = col + headerLine;
      startCounting = true;
		}

    headerLine += trgLineSeparator;

    out.println("myStringBuilder.setLength(0);");
    out.println("myStringBuilder.append(" + doubleQuote + headerLine + doubleQuote + ");");                    
    out.println("pBufferedWriter.write(myStringBuilder.toString());");
  }     
}



?>]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Target Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[DEF_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[858]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.283]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[743d65b9-d281-4bf8-922b-e59c0d21f838]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogFinalCmd" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[254]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimDrvdSel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.283]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Delete temporary files]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[1daafcda-9816-4caa-bc12-54f423c7e7c6]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[858]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[OdiFileDelete "-FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>*"]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[859]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[4702d24e-1390-450d-b2e6-9b5bae86b025]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogFinalCmd" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[255]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimDrvdSel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[70]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Compile Program]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[b8645b9e-9d43-4760-a241-7af9534553b0]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[859]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[OdiOSCommand "-WORKING_DIR=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>" "-ERR_FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>_err.txt" "-OUT_FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>_out.txt" 
<?  
String fileSeperator = java.lang.System.getProperty("file.separator");
String cmd = fileSeperator.equals("/")? " ":"cmd /c ";
String javaHome = "<%=odiRef.getOption("JAVA_HOME") %>";
if (javaHome==null || javaHome!=null && javaHome.length()==0) javaHome=java.lang.System.getProperty("java.home");
if (javaHome .matches(".*jre")) javaHome += fileSeperator + "..";  
out.print(cmd + '"' + javaHome);
if (javaHome .matches(".*jre")) out.print(fileSeperator + ".."); 
out.print(fileSeperator + "bin" + fileSeperator + "javac" + '"'); ?> <%=odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "")%><?=fileSeperator+getOdiClassName() + ".java" ?>]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String">null</Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[860]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[f43bfe31-39e9-494c-8d8c-e4c863806bcf]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogFinalCmd" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[256]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimDrvdSel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[60]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Create transformer]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[9b536aad-6d78-4a62-b396-143b44a7fc42]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[860]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[OdiOutFile "-FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>.java"
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.FileReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.FileWriter;
import java.io.File;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.Scanner;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Iterator;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

import java.lang.String;
import java.lang.StringBuilder;
import java.lang.RuntimeException;
import java.util.StringTokenizer; 

import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.math.BigDecimal;



<% 
/* This String is used in code generation in order to help the double quote management between the % and ? phases */
String safeSeparator = "$ODI Separator for Double Quote Generation. This String is long on purpose in order to ensure the uniqueness within the entire mapping generated.!$"; 
%>

public class <?= getOdiClassName() ?> {
	/* Number of threads that are to be run in parallel */
	static int NB_THREADS = <%= odiRef.getOption("NB_THREADS") %>;
        BufferedWriter pBufferedWriter;
	BufferedWriter pBufferedLogWriter;
	BufferedWriter pBufferedBadWriter;
	int nbError;
	int nbLine;
	int nbTotalLine;
	int nbWarning;
	int nbFiles;
	int nbFilter;
	int nbHeader;
	int nbInserted;
	
	boolean doWeContinueBatch = true;
	boolean maxErrorReach = false;

	Date debut = new Date(); 
	Date end =  new Date(); 
	static int maxError=0;
	
	HashMap codes = new HashMap(); 
  			
	/**
	 * @param pBufferedWriter
	 * @param pBufferedLogWriter
	 * @param pBufferedBadWriter
	 * @param nbError
	 * @param nbLine
	 * @throws IOException 
	 */
	public <?= getOdiClassName() ?>(String targF,String logF,String badF) throws IOException {
		super();

	<% if (odiRef.getOption("TARGET_ENCODING").trim().length() == 0) { %>
		this.pBufferedWriter = new BufferedWriter(new FileWriter(targF, <% if (odiRef.getOption("APPEND").equals("1")) { %>true<% } else { %>false<% } %>));
		this.pBufferedLogWriter = new BufferedWriter(new FileWriter(logF, false));
		this.pBufferedBadWriter = new BufferedWriter(new FileWriter(badF, false));		
		<% } else { %>
		this.pBufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targF, <% if (odiRef.getOption("APPEND").equals("1")) { %>true<% } else { %>false<% } %>), "<%= odiRef.getOption("TARGET_ENCODING").trim() %>"));
		this.pBufferedLogWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(logF, false), "<%= odiRef.getOption("TARGET_ENCODING").trim() %>"));
		this.pBufferedBadWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(badF, false), "<%= odiRef.getOption("TARGET_ENCODING").trim() %>"));
		<% } %>		

		pBufferedLogWriter.append("Oracle Data Integrator * File to File:\nCopyright (c) Oracle Corporation.  All rights reserved.");
		pBufferedLogWriter.append("\n\nNumber of threads: "+NB_THREADS);
		pBufferedLogWriter.append("\n\nDiscradmax: <%=odiRef.getOption("DISCARDMAX")%>");
		pBufferedLogWriter.append("\n\nOutputFile:\t\t"+targF+"\nBAD file:\t\t"+badF+"\n");
		
		this.nbError = 0;
		this.nbLine = 0;
		this.nbTotalLine=0;
		this.nbWarning=0;
		this.nbFiles=0;
		this.nbHeader=0;
		this.nbFilter=0;
		this.nbInserted=0;		
              
		<? init(); ?>
                      
	    
	}
	
	
	
	
	/* A simple object used to synchronize the reads of the source file and avoid overlap between the various threads */
	static Object lock = new Object();
	HashMap<Object, BigDecimal> sequenceMap = new HashMap<Object, BigDecimal>();
	HashMap<Object, BigDecimal> counterMap = new HashMap<Object, BigDecimal>();

	public String escapeRegex(String pRegex) {
		return pRegex
			.replaceAll("|", "\\\\|");
	}

	public  String[] splitRegex(String line, String delimiter) {
		return line.split(escapeRegex(delimiter));
	}
  
	public  String[] split(String line, String delimiter, int count) {
		return splitCustom(line, delimiter, count);
	}
              
	public  String[] splitCustom(String line, String delimiter, int count) {
        
		if (line==null)
			return null;
            
		int p1 = 0;
    		int p2 = 0;
    		int j=0;
    		int lineLength = line.length();
    		int delimiterLength = delimiter.length();
    		String[] fields = new String[count];

		do {
			p2 = line.indexOf(delimiter, p1); 
			if (p2==p1)
				fields[j] = null;
			else if (p2>-1)
				fields[j] = line.substring(p1, p2);
			else 
				fields[j] = (p1==lineLength)? null:line.substring(p1);
			p1 = p2 + delimiterLength;          
			j++;          
		} while (p1 <= lineLength  && j <count);           

		return fields;
	}
        

        
	public boolean getDoWeContinueBatch()
	{
		return doWeContinueBatch;
	}
	
	public void addInserted()
	{
		synchronized(lock) {
			nbInserted+=1;
			
		}
		
	}
	
	public void addWarning()
	{
		synchronized(lock) {
			nbWarning+=1;
			
		}
		
	}

	public void addFilter()
	{
		synchronized(lock) {
			nbFilter+=1;
			
		}
		
	}
	public BigDecimal getCounter(Object pFieldValue, long pStartValue) {
		if (counterMap.containsKey(pFieldValue)) {
			return counterMap.get(pFieldValue);
		} else {
			counterMap.put(pFieldValue, new BigDecimal(pStartValue));
			return counterMap.get(pFieldValue);
		}
	}

	public BigDecimal incrementCounter(Object pFieldValue, long pStartValue) {
		if (counterMap.containsKey(pFieldValue)) {
			counterMap.put(pFieldValue, counterMap.get(pFieldValue).add(BigDecimal.ONE));
			return counterMap.get(pFieldValue);
		} else {
			counterMap.put(pFieldValue, new BigDecimal(pStartValue));
			return counterMap.get(pFieldValue);
		}
	}

	public BigDecimal smartSequence(Object pField, Object pValue, long pStartValue) {
		if (pField.equals(pValue)) {
			return incrementCounter(pValue, pStartValue);
		} else {
			return getCounter(pValue, pStartValue);
		}
	}

	public BigDecimal smartSequence(Object pField, Object pValue) {
		return smartSequence(pField, pValue, 0);
	}


	public BigDecimal normalSequence(Object pSequenceName, long pStartValue) {
		if (sequenceMap.containsKey(pSequenceName)) {
			synchronized(sequenceMap.get(pSequenceName)) {
				sequenceMap.put(pSequenceName, sequenceMap.get(pSequenceName).add(BigDecimal.ONE));
				return sequenceMap.get(pSequenceName);
			}
		} else {
			synchronized (sequenceMap) {
				sequenceMap.put(pSequenceName, new BigDecimal(pStartValue));
				return sequenceMap.get(pSequenceName);
			}
		}
	}

	public BigDecimal normalSequence(Object pSequenceName) {
		return normalSequence(pSequenceName, 0);
	}

	/* Utility class used for String processing */ 
	class OdiStringUtils {
		/* This method is used to write Input String into the StringBuilder that contains the target row and pad with spaces if necessary */
		public void pad(StringBuilder pStringBuilder, String pString, int pLength) {
			pStringBuilder.append(pString);
			for (int i=0;i<pLength-pString.length();i++) {
				pStringBuilder.append(' ');
			}
			
		}
	}


	/* This class is the formatter for Strings that are to be written to the target file */
	class OdiStringFormatOUT{
		OdiStringUtils myStringUtils;
		
		String colName;
		String colMandatory;
		String colFormat;
		String colDecSep;
		String colNullIfErr;
		int    colBytes;
		String xString;

    /*
     Text Delimiter   
     
     Pair of characters delimiting a field. This delimiter escapes the field and 
     record separators. If a separator is in a field - between the delimiters - it 
     is not taken into account. The two left and right delimiter characters may be 
     similar or different. 
    */
        
    <% String textDelimiter = "";
    String textDelimiterLeft = "";
    String textDelimiterRight = "";
    
    int delimiterLength = odiRef.getTargetTable("FILE_ENC_FIELD").length();
    
    if (delimiterLength>0) {
      textDelimiter=odiRef.getTargetTable("FILE_ENC_FIELD").replaceAll("\u0022", "DoubleQuote");
      textDelimiterLeft=odiRef.getTargetTable("FILE_ENC_FIELD").substring(0,1).replaceAll("\u0022", "DoubleQuote");
      if (delimiterLength>1) 
        textDelimiterRight = odiRef.getTargetTable("FILE_ENC_FIELD").substring(1,2).replaceAll("\u0022", "DoubleQuote");
      else  
        textDelimiterRight = textDelimiterLeft;    
    }   
    %>
      
    String textDelimiterEscaped = "<%=textDelimiter%>".replaceAll("DoubleQuote", "\\\"");    
    String textDelimiterEscapedLeft = "<%=textDelimiterLeft%>".replaceAll("DoubleQuote", "\\\"");
    String textDelimiterEscapedRight = "<%=textDelimiterRight%>".replaceAll("DoubleQuote", "\\\"");    
		
		private void check(Warning Odiwarn) throws Exception
		{
      if (colMandatory.equals("1")) { 
        if (xString==null || xString!=null && xString.length()==0) { 
          if (colNullIfErr=="0"){
			  		throw new Exception ("Target column " + colName + " : Missing mandatory value");
				  } else if (colNullIfErr=="1") {
				    Odiwarn.AddWarn("Target column " + colName + " : Missing mandatory value");
				  }	
	  			return;			
	  		}         
			} 
      
      if (xString!=null && xString.length() > colBytes) {
        
        if (colNullIfErr=="0"){
					throw new Exception ("Target column " + colName + " : Value too long [" + xString + "]");
				} else if (colNullIfErr=="1") {
				  Odiwarn.AddWarn("Target column " + colName + " : Value too long [" + xString + "]");
				}	
        
				xString=null;
				return;			
			}
		}
    
		public OdiStringFormatOUT(String pColName,String pColMandatory, String pColFormat,String pColDecSep, String pColNullIfErr,int pColBytes, OdiStringUtils pStringUtils) {
			myStringUtils = pStringUtils;
			colName = pColName;
			colMandatory = pColMandatory;
			colFormat = pColFormat;
			colDecSep = pColDecSep;
			colNullIfErr = pColNullIfErr;
			colBytes = pColBytes;
		}
    
		public void format(String pString, StringBuilder pStringBuilder,Warning Odiwarn) throws Exception {                
                  
			xString=pString;        
			this.check(Odiwarn);
      
			if (pString==null) 
			  return;

      
			<% if ("D".equals(odiRef.getTargetTable("FILE_FORMAT"))) {
				if (!textDelimiter.equals("")) {  %>
        
					pStringBuilder.append(textDelimiterEscapedLeft).append(xString).append(textDelimiterEscapedRight);
                        <%  } else {%>
					pStringBuilder.append(xString);
			<%  } 
                        } else { 
                        	if (!textDelimiter.equals("")) {  %>                        
                        		myStringUtils.pad(pStringBuilder, textDelimiterEscapedLeft + xString + textDelimiterEscapedRight, colBytes);
                        <%  } else {%>
                        		myStringUtils.pad(pStringBuilder, xString, colBytes);
			<% } 
                        }%>
		}
	}

	/* This class is the formatter for Strings that are to be read from the source file */
	class OdiStringFormatIN{
		OdiStringUtils myStringUtils;
		String odiColname;
		String colTextDelimiter;
		String colNullIfErr;
		String colMandatory;

    <% String textDelimiterIN = "";
    String textDelimiterINLeft = "";
    String textDelimiterINRight = "";
    
    int delimiterLength = odiRef.getSrcTablesList("", "[FILE_ENC_FIELD]", "", "").length();
    
    if (delimiterLength>0) {
      textDelimiterIN = odiRef.getSrcTablesList("", "[FILE_ENC_FIELD]", "", "").replaceAll("\u0022", "DoubleQuote");
      textDelimiterINLeft = odiRef.getSrcTablesList("", "[FILE_ENC_FIELD]", "", "").substring(0,1).replaceAll("\u0022", "DoubleQuote");
      if (delimiterLength>1) 
        textDelimiterINRight = odiRef.getSrcTablesList("", "[FILE_ENC_FIELD]", "", "").substring(1,2).replaceAll("\u0022", "DoubleQuote");
      else  
        textDelimiterINRight = textDelimiterINLeft;    
    
    }   
    %>
      
		String textDelimiterINEscaped = "<%=textDelimiterIN%>".replaceAll("DoubleQuote", "\\\"");    
		String textDelimiterINEscapedLeft = "<%=textDelimiterINLeft%>".replaceAll("DoubleQuote", "\\\"");    
		String textDelimiterINEscapedRight = "<%=textDelimiterINRight%>".replaceAll("DoubleQuote", "\\\"");    

		public OdiStringFormatIN(OdiStringUtils pStringUtils, String pColname, String pColNullIfErr) {
			myStringUtils = pStringUtils;
			odiColname=pColname;
			colNullIfErr=pColNullIfErr;
		}

		public OdiStringFormatIN(OdiStringUtils pStringUtils, String pColname, String pColMandatory, String pColNullIfErr) {
			myStringUtils = pStringUtils;
			odiColname = pColname;
      colMandatory = pColMandatory;
			colNullIfErr = pColNullIfErr;
		}

		public String parse(String pString, Warning Odiwarn) throws Exception {

      if (pString==null || pString!=null && pString.length()==0) {
        if (colMandatory.equals("1")) {
				  if (colNullIfErr.equals("0")) {
				    throw new Exception ("Source Column " + odiColname + " : Missing mandatory value");
				  }
				  else if (colNullIfErr=="1") {
					  Odiwarn.AddWarn("Source Column " + odiColname + " : Missing mandatory value");					
				  }      
        }
        return pString;       
      }

      
      <% if ("D".equals(odiRef.getSrcTablesList("", "[FILE_FORMAT]", "", ""))) {
        if (!textDelimiterIN.equals("")) { %>                              
          return pString.replaceAll("\\s+\\z", "").replaceAll(textDelimiterINEscapedLeft, "").replaceAll(textDelimiterINEscapedRight, "");
        <% } else {%>
          return pString.replaceAll("\\s+\\z", "");
        <%   }
          } else {
            if (!textDelimiterIN.equals("")) { %>
              return pString.replaceAll("\\s+\\z", "").replaceAll(textDelimiterINEscapedLeft, "").replaceAll(textDelimiterINEscapedRight, "");
            <%  } else {%>
              return pString.replaceAll("\\s+\\z", "");
            <%  } 
        } %>
		}
	}


	/* This class is the formatter for Numbers that are to be written to the target file.
	Note that some more format() functions should be added to fully support all the possible datatypes (int, etc.) */
	class OdiNumberFormatOUT{
		OdiStringUtils myStringUtils;
		DecimalFormat internalParser;

		String colName;
		String colMandatory;
		String colFormat;
		String colDecSep;
		String colNullIfErr;
		String colScale;		
		int    colBytes;
		int    scale;


		private void check(Number pNumber,Warning Odiwarn) throws Exception {
			if (pNumber==null && colMandatory.equals("1") ) {
        if (colNullIfErr.equals("0")){
					throw new Exception ("Target column "+ colName + ": Missing mandatory value");
				} else if (colNullIfErr.equals("1")) {
						Odiwarn.AddWarn("Target column "+ colName + ": Missing mandatory value");
				}				
		 }    
		}
				
		public OdiNumberFormatOUT(String pColName, String pColMandatory, String pColScale, String pColFormat,String pColDecSep, String pColNullIfErr,int pColBytes, OdiStringUtils pStringUtils) {


			myStringUtils = pStringUtils;
			colName = pColName;
			colMandatory = pColMandatory;
			colFormat = pColFormat;
			colDecSep = pColDecSep;
			colNullIfErr = pColNullIfErr;
			colBytes = pColBytes;
			colScale = pColScale;

			if (colFormat == null || colFormat == "") {
				if (colScale == null || colScale == "")
					colFormat = "#.#";
				else {
					scale = Integer.parseInt(colScale);
					colFormat = (scale>0) ? "#." : "#";
					for (int i=0; i<scale; i++) {
						colFormat += "#";
					}
				}
			}		
      			
			if (colDecSep == null) {
				colDecSep = ".";
			}
			if (colDecSep.length() != 1) {
				colDecSep = ".";
			}
			DecimalFormatSymbols mySymbols = new DecimalFormatSymbols();
			mySymbols.setDecimalSeparator(colDecSep.charAt(0));
      
			internalParser = new DecimalFormat(colFormat, mySymbols);      
			internalParser.setParseBigDecimal(true);
		}

		public void format(Number pNumber, StringBuilder pStringBuilder,Warning Odiwarn) throws Exception {
			
			this.check(pNumber,Odiwarn);
      
			<% if ("D".equals(odiRef.getTargetTable("FILE_FORMAT"))) {%>
			if (pNumber == null) {
				return;
			}
			pStringBuilder.append(internalParser.format(pNumber));
			<% } else { %>
			if (pNumber == null) {
				myStringUtils.pad(pStringBuilder, "", colBytes);
			} else {
				myStringUtils.pad(pStringBuilder, internalParser.format(pNumber), colBytes);
			}
			<% } %>
		}

	}

	/* This class is the formatter for Numbers that are to be read from the source file. */
	class OdiNumberFormatIN{
		OdiStringUtils myStringUtils;
		DecimalFormat internalParser;
		ParsePosition internalParsePosition;
		String odiColname;
		String colNullIfErr;
		String colMandatory;


		public OdiNumberFormatIN(String pDecimalSeparator, OdiStringUtils pStringUtils, String pColname, String pColMandatory, String pColNullIfErr) {
			myStringUtils = pStringUtils;
			odiColname=pColname;
      colMandatory = pColMandatory;
			colNullIfErr=pColNullIfErr;
			if (pDecimalSeparator == null) {
				pDecimalSeparator = ".";
			}
			if (pDecimalSeparator.length() != 1) {
				pDecimalSeparator = ".";
			}
			DecimalFormatSymbols mySymbols = new DecimalFormatSymbols();
			mySymbols.setDecimalSeparator(pDecimalSeparator.charAt(0));
			internalParser = new DecimalFormat("#.#", mySymbols);
			internalParser.setParseBigDecimal(true);
			internalParsePosition = new ParsePosition(0);
		}

		public OdiNumberFormatIN(String pDecimalSeparator, OdiStringUtils pStringUtils, String pColname, String pColNullIfErr) {
			myStringUtils = pStringUtils;
			odiColname=pColname;
			colNullIfErr=pColNullIfErr;
			if (pDecimalSeparator == null) {
				pDecimalSeparator = ".";
			}
			if (pDecimalSeparator.length() != 1) {
				pDecimalSeparator = ".";
			}
			DecimalFormatSymbols mySymbols = new DecimalFormatSymbols();
			mySymbols.setDecimalSeparator(pDecimalSeparator.charAt(0));
			internalParser = new DecimalFormat("#.#", mySymbols);
			internalParser.setParseBigDecimal(true);
			internalParsePosition = new ParsePosition(0);
		}
    
		/* This function returns null in case an Exception occurs during the parsing of the String as a Number */
		public Number parse(String pString, Warning Odiwarn) throws Exception {

      if (pString==null || pString!=null && pString.length()==0) {
        if (colMandatory.equals("1")) {
				  if (colNullIfErr.equals("0")) {
				    throw new Exception ("Source Column " + odiColname + " : Missing mandatory value");
				  }
				  else if (colNullIfErr=="1") {
					  Odiwarn.AddWarn("Source Column " + odiColname + " : Missing mandatory value");					
				  }      
        }
        return null;       
      }

			internalParsePosition.setIndex(0);
			Number x= internalParser.parse(pString.trim(), internalParsePosition);
			if ((pString.trim().length()>internalParsePosition.getIndex())) 
			{	x=null;
				if (colNullIfErr=="0"){
				throw new Exception ("Source column " + odiColname + " : Invalid number [" + pString.trim() + "]" );
				}
				if (colNullIfErr=="1")
				{
					Odiwarn.AddWarn("Source column " + odiColname + " : Invalid number [" + pString.trim() + "]");
					
				}
			}
			
			
			return x;
		}
	}

	/* This class is the formatter for Dates that are to be read from the source file */
	class OdiDateFormatIN{
		OdiStringUtils myStringUtils;
		SimpleDateFormat internalParser;
		ParsePosition internalParsePosition;
		String odiColname;
		String colNullIfErr;
		String localPattern="";
		String colMandatory;

		public OdiDateFormatIN(String pPattern, OdiStringUtils pStringUtils, String pColname, String pColMandatory, String pColNullIfErr) {
			myStringUtils = pStringUtils;
			odiColname = pColname;
      colMandatory = pColMandatory;
			colNullIfErr=pColNullIfErr;
			if (pPattern == null || pPattern == "") {
				localPattern = "dd/MM/yyyy";
			} else localPattern=pPattern;
			
			//internalParser = new SimpleDateFormat(pPattern);
			//internalParsePosition = new ParsePosition(0);
		}


		/* This method returns null if an error occurs when parsing the String as a date */
		public Date parse(String pString, Warning Odiwarn) throws Exception {

      if (pString==null || pString!=null && pString.length()==0) {
        if (colMandatory.equals("1")) {
				  if (colNullIfErr.equals("0")) {
				    throw new Exception ("Source Column " + odiColname + " : Missing mandatory value");
				  }
				  else if (colNullIfErr=="1") {
					  Odiwarn.AddWarn("Source Column " + odiColname + " : Missing mandatory value");					
				  }      
        }
        return null;       
      }
          
			internalParser = new SimpleDateFormat(localPattern);
			internalParsePosition = new ParsePosition(0);
			internalParsePosition.setIndex(0);
			internalParser.setLenient(false);
			Date x= internalParser.parse(pString.trim(),internalParsePosition);
			
			if (internalParsePosition.getErrorIndex() > -1 && pString.length()>0 ) {	
        x=null;
				if (colNullIfErr=="1") {
					Odiwarn.AddWarn("Source Column " + odiColname + " : Invalid date [" + pString.trim() + "]");					
				}
				if (colNullIfErr=="0") {
				  throw new Exception ("Source Column " + odiColname + " : Invalid date [" + pString.trim() + "]");
				}
			}
		

			return x;
	}
	}


	/* This class is the formatter for Dates that are to be written to the target file */
	class OdiDateFormatOUT{
		OdiStringUtils myStringUtils;
		SimpleDateFormat internalParser;
		String colName;
		String colMandatory;
		String colFormat;
		String colDecSep;
		String colNullIfErr;
		int    colBytes;
		Date xDate;


    private void check(Warning Odiwarn) throws Exception {        
      if (colMandatory.equals("1")) { 
        if (xDate==null) { 
          if (colNullIfErr=="0"){
			  		throw new Exception ("Target column " + colName + " : Missing mandatory value");
				  } else if (colNullIfErr=="1") {
				    Odiwarn.AddWarn("Target column " + colName + " : Missing mandatory value");
				  }	
	  			return;			
	  		}         
			} 
		}

		public OdiDateFormatOUT(String pColName,String pColMandatory, String pColFormat,String pColDecSep, String pColNullIfErr,OdiStringUtils pStringUtils) {

			myStringUtils = pStringUtils;
			colName = pColName;
			colMandatory = pColMandatory;
			colFormat = pColFormat;
			colDecSep = pColDecSep;
			colNullIfErr = pColNullIfErr;
			colBytes = 0;
			
			if (colFormat == null || colFormat == "") {
				colFormat = "dd/MM/yyyy";
			}
			internalParser = new SimpleDateFormat(colFormat);
		}

		public void format(Date pDate, StringBuilder pStringBuilder,Warning Odiwarn) throws Exception {

			xDate=pDate;

			this.check(Odiwarn);
      
			<% if ("D".equals(odiRef.getTargetTable("FILE_FORMAT"))) {%>
			if (xDate != null) {
				pStringBuilder.append(internalParser.format(xDate));
			}
			<% } else { %>
			if (xDate == null) {
				myStringUtils.pad(pStringBuilder, "", colBytes);
			} else {
				myStringUtils.pad(pStringBuilder, internalParser.format(xDate), colBytes);
			}
			<% } %>
		}
	}


class Warning 
{
	boolean warning;
	String warntext;
	int currentLine;
	int nbWarn;
	
	public Warning ()
	{
		warning=false;
		warntext="";
	}
	
	public void New (int i)
	{
		warning=false;
		warntext="";
		currentLine=i;
		nbWarn=0;
		
	}
	public void AddWarn (String txt)
	{


				if (warning) {	
				warntext=warntext+"\n"+txt;
					} else {
				warntext=warntext+"\n"+txt;
					}			
		warning=true;
		nbWarn+=1;
		
		
	}
	
}

	/* This class contains the code of the Thread that reads a line from the source file, processes a line and writes the output to the Target */
	class OdiFileTransformer extends Thread {
		OdiStringUtils myStringUtils= new OdiStringUtils();
		Scanner myScanner;
		Warning Odiwarn=new Warning();
		
		<?
			 createInputFormaters();
			 createOutputFormaters();
		?>
		String tmpString;                
		<% if ("D".equals(odiRef.getSrcTablesList("", "[FILE_FORMAT]", "", ""))) {%>
		String[] srcCols;
		<% } %>
		<%=odiRef.getSrcColList("", "", "<? if (\u0022DATE\u0022.equals(\u0022[SOURCE_DT]\u0022)) {?>Date<? } else if (\u0022NUMERIC\u0022.equals(\u0022[SOURCE_DT]\u0022)) {?>Number<? } else { ?>String<? } ?> srcCols" + odiRef.getSrcTablesList("", "[POP_TAB_ALIAS]", "", "") + "_[COL_NAME]; ",  "\n\t\t", "") %>
		String srcRecordSeparator;
		String trgRecordSeparator;
		String trgLineSeparator;
		StringBuilder myStringBuilder;
                StringTokenizer st;

    		
		public OdiFileTransformer(Scanner pScanner){
			super();
			myScanner = pScanner;
			
			tmpString = null;
			this.setName("OdiFileTransformer");
			<% if ("D".equals(odiRef.getSrcTablesList("", "[FILE_FORMAT]", "", ""))) {%>          
				srcCols = new String[<%=odiRef.getSrcColList("", "1", "1", "+", "")%>];
			<% } %>			
			srcRecordSeparator = "<%= odiRef.getSrcTablesList("", "[SFILE_SEP_FIELD]", "", "") %>";
			trgRecordSeparator = "<%= odiRef.getTargetTable("SFILE_SEP_FIELD") %>";
			trgLineSeparator = "<%= odiRef.getTargetTable("SFILE_SEP_ROW") %>";
			myStringBuilder = new StringBuilder();

		}

		public boolean skipRecordCode(String column, String value){
			String code= (String)codes.get(column);
			return (value!=null && !code.equals(value) && code.indexOf(";"+value)<0 && code.indexOf(value+";")<0);				
		}
	
		public void run() {
		boolean bad = false;
        
		try {
    
                        <? writeHeaderLine(); ?>  
				
			while (doWeContinueBatch){
				/* The calls to the Scanner need to be synchronized manually as it is not threadsafe */
				synchronized(lock) {
					if (myScanner.hasNext()) {
						tmpString=myScanner.next();
						nbLine+=1;
					} else {
						return;
					}
						
				}
				bad = false;
				Odiwarn.New(nbLine);
				
				try {
				<% if ("D".equals(odiRef.getSrcTablesList("", "[FILE_FORMAT]", "", ""))) {%>
				srcCols = split(tmpString, srcRecordSeparator, <%=odiRef.getSrcColList("", "1", "1", "+", "")%>);
				<% } %>

				<? recordCodeFilter(); ?>				
				
				/* The Filters are generated as if Statements that go to the next row to process if any condition is false */
				<%= odiRef.getFilterList(0, "", "<? createInputFormaters(" + safeSeparator + "[EXPRESSION]" + safeSeparator + "); ?>if (!(<?= replaceMappings(" + safeSeparator + "[EXPRESSION]" + safeSeparator + ") ?>)) {addFilter();continue;}", "", "").replace("" + '"', "" + '"' + " + '" + '"' + "' + " + '"').replace(safeSeparator, "" + '"') %>


				/* We start the processing of the line by clearing the StringBuilder */
				myStringBuilder.setLength(0);

		<%= odiRef.getColList("<? createInputFormaters(" + safeSeparator + "[EXPRESSION]" + safeSeparator + "); ?>", "\t\t").replace("" + '"', "" + '"' + " + '" + '"' + "' + " + '"').replace(safeSeparator, "" + '"') %>

				<? outputs(); ?>
				myStringBuilder.append(trgLineSeparator);
				pBufferedWriter.write(myStringBuilder.toString());
				
				if (Odiwarn.warning)
				{
					pBufferedLogWriter.append("\nwarning line: "+Odiwarn.currentLine+"\t"+Odiwarn.warntext);
					addWarning();
				}
				addInserted();
				}
				catch (Exception e) {
					// TODO: handle exception
					pBufferedLogWriter.append("\nError line: "+nbLine+"\t"+e.getMessage());
					e.printStackTrace();
					pBufferedBadWriter.append(tmpString+"\n");

					synchronized(lock) {
						nbError+=1;
						<% if (odiRef.getOption("DISCARDMAX").equals("0")) { %>
							//unlimited error code skipped
						<%} else {%>
						if (nbError >=<%=odiRef.getOption("DISCARDMAX")%>) 
							{pBufferedLogWriter.append("\n\nMaximum number of errors reached \n");
						    doWeContinueBatch=false;
						    maxErrorReach=true;
							return;}
						<%}%>
					
					}
				}
			}
      
      
		}
		catch (Exception e) {
			throw(new RuntimeException(e.getMessage()));
		}
	}
}
	static class OdiFileFilter implements FilenameFilter {
		Pattern myPattern;
		BufferedWriter myLogWriter;
		public OdiFileFilter (String pPattern,BufferedWriter logWriter) throws IOException {

			File pWorkSchema = new File("<%=odiRef.getSrcTablesList("", "[SCHEMA]", "", "")%>");
			StringBuilder buffer = new StringBuilder();
			pPattern = pWorkSchema.getAbsolutePath() + "/" + pPattern;
			myLogWriter=logWriter;
			char[] chars = pPattern.toCharArray();
			for (int i = 0; i < chars.length; ++i)    {
				if (chars[i] == '*')
					buffer.append(".*");
				else if (chars[i] == '?')
					buffer.append(".");
				else if ("+()^$.{}[]|\\".indexOf(chars[i]) != -1) 
					buffer.append('\\').append(chars[i]);
				else
					buffer.append(chars[i]);
			}
			myPattern = Pattern.compile(buffer.toString());
			myLogWriter.append("\nPattern: " + buffer.toString());
		}
		public boolean accept(File pDir, String pName) {
			Matcher myMatcher = myPattern.matcher(pDir.getAbsolutePath() + "/" + pName);
			System.out.println("" + myMatcher.matches() + pDir.getAbsolutePath() + "/" + pName);
			return myMatcher.matches();
		}
	}

	public static void main(String[] args) throws Exception{
		
		/*
		LOG_FILE = <%=odiRef.getOption ("LOG_FILE")%>
		BAD_FILE = <%=odiRef.getOption ("BAD_FILE")%>
		*/
		
		<% if (odiRef.getOption ("BAD_FILE").length()==0) { %>
			String wbadfile = "<%= odiRef.getTable("TARG_NAME") %>.bad";
		<%} else {%>
			String wbadfile = "<%= odiRef.getOption ("BAD_FILE") %>";		
		<% }; %> 

		<% if (odiRef.getOption ("LOG_FILE").length()==0) { %>
			String wlogfile = "<%= odiRef.getTable("TARG_NAME") %>.log";
		<%} else {%>
			String wlogfile = "<%= odiRef.getOption ("LOG_FILE") %>";		
		<% }; %> 
		<?= getOdiClassName() ?> myIKMFileProcessing = new <?= getOdiClassName() ?>("<%= odiRef.getTable("TARG_NAME") %>",wlogfile,wbadfile);
		File[] inputFileList;
		OdiFileFilter myFileFilter = new OdiFileFilter("<%= odiRef.getSrcTablesList("", "[RES_NAME]", "", "") %>",myIKMFileProcessing.pBufferedLogWriter);
		File inputDir = new File("<%= odiRef.getSrcTablesList("", "[SCHEMA]", "", "") %>");
		inputFileList = inputDir.listFiles(myFileFilter);
		String s="";

		if (inputFileList.length==0) {myIKMFileProcessing.pBufferedLogWriter.append("\n\tError : Source file don't exists");}
		

		for (int i=0;i<inputFileList.length;i++) {
			if (myIKMFileProcessing.getDoWeContinueBatch()) {
				
			s=myIKMFileProcessing.processInputFile(inputFileList[i]);
			
			}
		}
		myIKMFileProcessing.pBufferedLogWriter.append(s);
		myIKMFileProcessing.pBufferedLogWriter.flush();

		<% if ((odiRef.getOption("PROCESSED_FILE_PREFIX").trim().length() + odiRef.getOption("PROCESSED_FILE_SUFFIX").trim().length()) > 0) { %>
		for (int i=0;i<inputFileList.length;i++) {
			String parentDirName = inputFileList[i].getParent();
			String fileName = inputFileList[i].getName();
			String newFileName = parentDirName + "/" + <%= odiRef.getQuotedString(odiRef.getOption("PROCESSED_FILE_PREFIX")) %> + fileName + <%= odiRef.getQuotedString(odiRef.getOption("PROCESSED_FILE_SUFFIX")) %>;
			inputFileList[i].renameTo(new File(newFileName));
		}
		<% } %>

	}

	public String processInputFile(File pInputFile) throws Exception {
		/* We open the source File by taking the encoder into account if needed */
		<% if (odiRef.getOption("SOURCE_ENCODING").trim().length() == 0) { %>
			Scanner myScanner = new Scanner(new BufferedReader(new FileReader(pInputFile)));
		<% } else { %>
			Scanner myScanner = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(pInputFile),"<%=odiRef.getOption("SOURCE_ENCODING").trim() %>")));
		<% } %>
		  pBufferedLogWriter.append("\nInput file:\t\t"+pInputFile);
		/* We use a Scanner as the record separator might not necessarily be \n */
		myScanner.useDelimiter("<%= odiRef.getSrcTablesList("[SFILE_SEP_ROW]", "") %>");

		/* We read the first lines in order to ignore them depending on the setting of the source datastore */
		for (int i=0;i < <%= odiRef.getSrcTablesList("", "[FILE_FIRST_ROW]", "", "") %>;i++){
			
			if (myScanner.hasNext()) {
				myScanner.next();
				nbLine+=1;
				nbHeader+=1;
			}
		}

		OdiFileTransformer[] odiFileTransformers = new OdiFileTransformer[NB_THREADS];
		for (int i=0;i<NB_THREADS;i++){
			odiFileTransformers[i] = new OdiFileTransformer(myScanner );
		}
		
		for (int i=0;i<NB_THREADS;i++){
			odiFileTransformers[i].start();
		}

		for (int i=0;i<NB_THREADS;i++){
			odiFileTransformers[i].join();
		}
		
		end=new Date();
			
		
		

		if (maxErrorReach)
		{
			 pBufferedLogWriter.append("\n\tNumber of lines read for this file:\t\t"+nbLine+"\n\n\n");			
		}
		else
		{
			  pBufferedLogWriter.append("\n\n\tNumber of lines for this file:\t\t"+nbLine+"\n\n\n");			
		}
		  nbFiles+=1;
		  nbTotalLine+=nbLine;
		  nbLine=0;
		  
			
		  
		  
		  
		  String s= "\n\n\n\n*************************************************************************";
		  s = s + "\n\t"+nbTotalLine+" Rows successfully read.\n" ;
		  s = s +"\t"+nbHeader+" Rows skipped (Header).\n" ;

		  s = s + "\t"+nbInserted+" Rows successfully loaded.\n" ;
		  s = s +"\t\t==>"+nbWarning+" Rows loaded with warning.\n" ;
		  s = s +"\t"+nbError+" Rows not loaded due to data errors.\n" ;
		  s = s +"\t"+nbFilter+" Rows not loaded because of filter.\n" ;
		  s = s + "\n\n\n";
		  s = s + "\n\tRun began on "+debut;
		  s = s + "\n\tRun ended on "+end;
		  //long x=   ;
		  s = s + "\n\tElapsed time was:\t"+Math.abs(end.getTime() - debut.getTime())+" milliseconde";
		  

		/* We flush the buffer for any data that has not been written on the disk yet */
		pBufferedWriter.flush();
		pBufferedLogWriter.flush();
		pBufferedBadWriter.flush();
		
		return s;
	}
}
]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String"><![CDATA[FILE]]></Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[861]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String"><![CDATA[SUNOPSIS_API]]></Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[37408927-a5da-4bf1-b0bb-69044354adb3]]></Field>
	<Field name="IndErr" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogFinalCmd" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[257]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
	<Field name="KcmAk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmCond" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmErrDel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmJoin" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmNull" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KcmPk" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimDrvdSel" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KimJrnPop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmCreate" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmDrop" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmExtend" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmPurge" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetInstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSetUninstall" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmSubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUnsubscribe" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmAfterInt" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmIdx" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KlmJrn" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-02-10 22:35:51.287]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[80]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[Execute Program]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[c1f6b256-9f0a-4a93-9b7a-a2181a6fde4d]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[861]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[OdiOSCommand  "-WORKING_DIR=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>" "-ERR_FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>_err.txt" "-OUT_FILE=<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>/<?= getOdiClassName() ?>_out.txt"
cd "<%= odiRef.getSrcTablesList("", "[WORK_SCHEMA]", "", "") %>" <?= java.lang.System.getProperty("file.separator").equals("/")? ";":"&" ?> "<% 
String javaHome = odiRef.getOption("JAVA_HOME");
if (javaHome==null || javaHome!=null && javaHome.length()==0) javaHome=java.lang.System.getProperty("java.home");
out.print(javaHome); %>/bin/java" <?= java.lang.System.getProperty("file.separator").equals("/")? " -cp . ":" " ?> "<?= getOdiClassName() ?>"
]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[01da1677-bb73-44e0-aaac-93e16f0f0b78]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[253]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[18f47d4f-d850-4cbe-9c72-7751449a7b38]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[253]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[309]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[5ad0c9bc-9cd3-4c6e-bb54-e8e5ba6e44e1]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[254]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[a7631c5a-801d-4946-859b-7defaebe685d]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[255]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[309]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[a526864b-7bb2-44f9-bf25-8da4f09580b5]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[255]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[daefda23-228e-4f87-ba7c-c1225a13f762]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[256]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[309]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[e5033d99-6c65-41e3-8c4e-72959c87a35c]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[256]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[6f970f90-b225-42ca-bff8-550a7d2d21c5]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[257]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[309]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrtUe">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[e3ef8373-c3ff-4a9c-936e-2f2f4497d481]]></Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[257]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[46]]></Field>
	<Field name="IUserExit" type="com.sunopsis.sql.DbInt"><![CDATA[316]]></Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.845]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[16c6ad62-063c-4dcc-870a-fa50d1129c4b]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.145]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[53fc0da9-9e7d-457b-9d09-e24bf62a1330]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java)]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.846]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[bee80584-0145-4375-b375-4eb796db2b21]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.847]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[f197d177-51a2-43d7-b109-471264992184]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_ORIGTXT.111]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String">null</Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.848]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[53dc22a0-5303-4c0d-afb1-bed7ce9a1230]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.849]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[6e34eabe-11c0-4c8b-acdd-37a7090d5063]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.850]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[64c53118-7d43-44f7-91af-c8a2e143e945]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.851]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[b255ce5a-8e25-44d9-acef-0a5968a9c421]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.852]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[a30ef615-6cec-4d2a-8ad9-1a168c1e5b79]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.853]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[19b47abd-9a79-44dc-948e-032d9fa59990]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.854]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[2e96ac6a-0f59-48a0-8373-eda71cfb41bb]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.855]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[3e315364-75a5-4917-91a1-8616de0bc5ca]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.856]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[d390cd5b-78e7-461f-9dcf-2920700ecfba]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.857]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[ace63dd0-3e26-4314-ab0c-f68163cf584f]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.858]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[1daafcda-9816-4caa-bc12-54f423c7e7c6]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_ORIGTXT.102]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String">null</Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.859]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[b8645b9e-9d43-4760-a241-7af9534553b0]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.860]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[9b536aad-6d78-4a62-b396-143b44a7fc42]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.861]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[c1f6b256-9f0a-4a93-9b7a-a2181a6fde4d]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_USEREXIT.316]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[6442cb67-e066-48b2-b81a-80dcd7ec0355]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).REMOVE_TEMPORARY_OBJECTS]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_USEREXIT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.24]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_LINETRT.253]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[2daca3e8-70ba-4447-97fb-4635f51eed47]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).Initialize replacement method]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_LINETRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.29]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_USEREXIT.309]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[a88616c8-77f8-4d14-99f7-3408e3ca68f5]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).APPEND]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_USEREXIT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.6]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_LINETRT.254]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[743d65b9-d281-4bf8-922b-e59c0d21f838]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).Delete temporary files]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_LINETRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.22]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_LINETRT.255]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[4702d24e-1390-450d-b2e6-9b5bae86b025]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).Compile Program]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_LINETRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.15]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_LINETRT.256]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[f43bfe31-39e9-494c-8d8c-e4c863806bcf]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).Create transformer]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_LINETRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.18]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_LINETRT.257]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[37408927-a5da-4bf1-b0bb-69044354adb3]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM File to File (Java).Execute Program]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT.SNP_LINETRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23.15]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[17]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[26]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[17]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.07]]></Field>
</Object>
</SunopsisExport>
